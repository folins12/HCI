<!DOCTYPE html>
<html>
<head>
  <title>Profilo Utente</title>
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/weather-icons/2.0.10/css/weather-icons.min.css">

</head>
<body>
  <div class="profile-container">
    <div class="welcome-message">
      Welcome to your profile <%= @user.nome.capitalize %>!
    </div>


    <div id="profile-view" style="<%= @user.errors.any? ? 'display: none;' : 'display: block;' %>">
      <div class="profile-table">
        <table>
          <tr>
            <th>Name</th>
            <td><%= @user.nome %></td>
          </tr>
          <tr>
            <th>Surname</th>
            <td><%= @user.cognome %></td>
          </tr>
          <tr>
            <th>Email</th>
            <td><%= @user.email %></td>
          </tr>
        </table>
      </div>
      <div class="profile-buttons">
        <button id="edit-profile-button" class="btn btn-primary">Edit profile</button>
        <%= link_to 'Logout', destroy_user_session_path, method: :delete, id: 'logout-button', class: 'btn btn-danger' %>
      </div>
    </div>

    <div id="profile-edit" style="<%= @user.errors.any? ? 'display: block;' : 'display: none;' %>">
      <%= form_with model: @user, url: user_profile_path, local: true do |form| %>
        <div class="input-group <%= 'has-error' if @user.errors[:nome].any? %>">
          <%= form.label :nome, "Name", class: 'form-label' %>
          <%= form.text_field :nome, value: @user.nome.capitalize, required: true %>
        </div>
        <% @user.errors[:nome].each do |error| %>
          <div class="error-message"><%= error %></div>
        <% end %>

        <div class="input-group <%= 'has-error' if @user.errors[:cognome].any? %>">
          <%= form.label :cognome, "Surname", class: 'form-label' %>
          <%= form.text_field :cognome, value: @user.cognome.capitalize, required: true %>
        </div>
        <% @user.errors[:cognome].each do |error| %>
          <div class="error-message"><%= error %></div>
        <% end %>

        <div class="input-group <%= 'has-error' if @user.errors[:current_password].any? %>">
          <%= form.label :current_password, "Current Password", class: 'form-label' %>
          <%= form.password_field :current_password, required: true %>
        </div>
        <% @user.errors[:current_password].each do |error| %>
          <div class="error-message"><%= error %></div>
        <% end %>

        <div class="input-group <%= 'has-error' if @user.errors[:password].any? %>">
          <%= form.label :password, "New Password", class: 'form-label'%>
          <%= form.password_field :password, placeholder: "Leave it blank if you do not want to change it" %>
        </div>
        <% @user.errors[:password].each do |error| %>
          <div class="error-message"><%= @user.errors[:password].join(', ').html_safe %></div>
        <% end %>

        <div class="input-group <%= 'has-error' if @user.errors[:password_confirmation].any? %>">
          <%= form.label :password_confirmation, "Confirm The New Password", class: 'form-label' %>
          <%= form.password_field :password_confirmation, placeholder: "Leave it blank if you do not want to change it" %>
        </div>
        <% @user.errors[:password_confirmation].each do |error| %>
          <div class="error-message"><%= error %></div>
        <% end %>

        <div class="input-group <%= 'has-error' if @user.errors[:address].any? %>">
          <%= form.label :address, "New Home Address", class: 'form-label' %>
          <%= form.text_field :address, value: @user.address, required: true %>
        </div>
        <% @user.errors[:address].each do |error| %>
          <div class="error-message"><%= error %></div>
        <% end %>

        <div class="profile-buttons">
          <%= form.submit "Send", class: "btn btn-primary" %>
          <button id="cancel-edit-button" class="btn btn-secondary" type="button" onclick="cancelEdit()">Discard</button>
        </div>
      <% end %>
    </div>


  </div>

  
  <div class="weather-message">
    Check the weather in your area to decide whether to water today
  </div>
  <div class="weather-widget" id="weather-widget">
    <p>Loading weather...</p>
  </div>



  <% if @myplants.present? && @myplants.any? %>
    <div class="plant-message">
      Your plant collection:
    </div>
    <div class="plants-grid <%= 'single-item' if @myplants.size == 1 %>">
      <% @myplants.each do |plant| %>
        <div class="plant-box">
          <div class="plant-image">
            <%= image_tag "#{plant.name}.jpg", alt: plant.name %>
          </div>
          
          <div class="plant-info">
            <p class="nome"><strong><%= plant.name %></strong></p>
            <p><strong>Typology:</strong> <%= plant.typology %></p>
            <p><strong>Light:</strong> <%= ['Full shade', 'Partial shade', 'Indirect light', 'Direct sunlight'][plant.light - 1] %></p>
            <p><strong>Watering:</strong> <%= ['Rarely', 'Occasionally', 'Frequently'][plant.irrigation - 1] %></p>
            <p><strong>Size:</strong> <%= ['Small', 'Medium', 'Large'][plant.size - 1] %></p>
            <p><strong>Climate:</strong> <%= plant.climate %></p>
            <p><strong>Use:</strong> <%= plant.use %></p>
            <p><strong>Description:</strong> <%= plant.description %></p>
          </div>
          
          <div class="btn-removemyplant" data-myplant-id="<%= plant.id %>">
            <p>Remove</p>
          </div>
        </div>
      <% end %>
    </div>
  <% else %>
    <div class="btn-nurs">
      <p class="no-results">Your plant collection is empty.<br> Add the plants you have at home by clicking here</p>
      <%= link_to 'catalog', infoplants_path, class: 'nav-link btn-primary' %>
    </div>
    
  <% end %>


  
  <div class="table-reservations">
    <h2 style="font-size: 2em;">Your Reservations</h2>

    <% if @user_reservations.present? && @user_reservations.empty? %>
      <div class="btn-nurs">
        <p style="font-size: 1.3em;">You have no pending orders at the moment</p>
        <%= link_to 'Book From Nurseries', nurseries_path, class: 'nav-link btn-primary' %>
      </div>

    <% else %>
      <% if @user_reservations.present? %>
        <table>
          <thead>
            <tr>
              <th>Plant</th>
              <th>Nursery Email</th>
              <th>Quantity</th>
              <th>Reduce</th>
            </tr>
          </thead>
          <tbody>
            <% @user_reservations.each do |reservation| %>
              <tr>
                <td><%= reservation.plant_name %></td>
                <td><%= reservation.nursery_email %></td>
                <td><%= reservation.quantity %></td>
                <td>
                  <div class="btn-decreserve" data-reservation-id="<%= reservation.resid %>" data-nursery-plant-id="<%= reservation.np_id %>" data-user-email-id="<%= reservation.user_email %>">
                    -
                  </div>
                </td>
              </tr>
            <% end %>
          </tbody>
        </table>
      <% else %>
        <div class="btn-nurs">
          <p style="font-size: 1.3em;">You have no pending orders at the moment</p>
          <%= link_to 'Book From Nurseries', nurseries_path, class: 'nav-link btn-primary' %>
        </div>
      <% end %>
    <%end%>
  </div>

  

  <script type="text/javascript">
    document.addEventListener("DOMContentLoaded", function() {
      const reserveDecButtons = document.querySelectorAll(".btn-decreserve");

      reserveDecButtons.forEach(button => {
        button.addEventListener("click", function() {
          const reservationId = button.getAttribute('data-reservation-id');
          const nurseryplantId = button.getAttribute('data-nursery-plant-id');
          const useremail = button.getAttribute('data-user-email-id');

          const row = this.closest('tr');
          const quantityCell = row.querySelector('td:nth-child(3)');
          const currentQuantity = parseInt(quantityCell.textContent, 10);

          const updateQuantity = (newQuantity) => {
            quantityCell.textContent = newQuantity;
          };

          const handleDecrement = () => {
            this.style.pointerEvents = "none"; 

            fetch('/decreserve', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
              },
              body: JSON.stringify({ reservation_id: reservationId, nurseryplant_id: nurseryplantId, user_email: useremail })
            })
            .then(response => {
              if (!response.ok) {
                return response.text().then(text => {
                  throw new Error(text);
                });
              }
              return response.json();
            })
            .then(data => {
              console.log("Server response:", data); 

              if (data.success) {
                const newQuantity = currentQuantity - 1;

                if (newQuantity <= 0) {
                  row.remove(); 
                } else {
                  updateQuantity(newQuantity);
                }
              } else {
                alert(data.message || "Error modifying reservation. Please try again.");
              }
            })
            .catch(error => {
              console.error('Error:', error);
              alert('Error: ' + error.message);
            })
            .finally(() => {
              this.style.pointerEvents = "auto";
            });
          };

          if (currentQuantity <= 1) {
            if (confirm('Are you sure you want to remove the reservation for this plant?')) {
              handleDecrement();
            }
          } else {
            handleDecrement();
          }
        });
      });


      const reserveRemButtons = document.querySelectorAll(".btn-removemyplant");
    
      reserveRemButtons.forEach(button => {
          button.addEventListener("click", function() {
              const myplantId = this.dataset.myplantId;
              const plantBox = this.closest('.plant-box');
              this.style.pointerEvents = "none";
              fetch('/removemyplant', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json',
                      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                  },
                  body: JSON.stringify({ plant_id: myplantId }) 
              })
              .then(response => {
                  if (!response.ok) {
                      return response.text().then(text => {
                          throw new Error(text);
                      });
                  }
                  return response.json();
              })
              .then(data => {
                  if (data.success) {
                      plantBox.remove(); 
                  } else {
                      alert(data.message || "Error removing. Please try again.");
                      this.style.pointerEvents = "auto"; 
                  }
              })
              .catch(error => {
                  console.error('Error:', error);
                  alert('Error: ' + error.message);
                  this.style.pointerEvents = "auto";
              });
          });
      });

    });


    document.getElementById("edit-profile-button").addEventListener("click", function() {
      document.getElementById("profile-view").style.display = "none";
      document.getElementById("profile-edit").style.display = "block";
    });

    function cancelEdit() {
      document.getElementById("profile-edit").style.display = "none";
      document.getElementById("profile-view").style.display = "block";
    }
  
    document.addEventListener('DOMContentLoaded', function() {
      const address = "<%= raw @current_user&.address.to_s %>";
      geocodeAddress(address).then(location => {
        if (location) {
          fetchWeatherData(location.lat, location.lng);
        } else {
          document.getElementById('weather-widget').innerHTML = '<p>Weather not available.</p>';
        }
      });
    });
    
    async function geocodeAddress(address) {
      const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`;
      
      try {
        const response = await fetch(url);
        const data = await response.json();
        if (data.length > 0) {
          const location = data[0];
          const latitude = location.lat;
          const longitude = location.lon;
          return { lat: parseFloat(latitude), lng: parseFloat(longitude) };
        } 
        return null;
      } catch (error) {
        console.error('Error fetching geocode data:', error);
        return null;
      }
    }

    function fetchWeatherData(lat, lon) {
      fetch(`/users/fetch_weather?lat=${lat}&lon=${lon}`)
        .then(response => response.json())
        .then(data => {
          //console.log('Weather data:', data);

          if (data.weather) {
            const weather = data.weather;
            const descriptionInEnglish = weather.weather[0].description.toLowerCase();
            const iconCode = weatherIconMapping[descriptionInEnglish] || "01d";
            const iconUrl = weatherIcons[iconCode];

            //const descriptionInItalian = weatherDescriptions[descriptionInEnglish] || descriptionInEnglish;

            const widgetContent = `
              <h2 style="color: #004d00;">Weather</h2>
              <img src="${iconUrl}" alt="Icona meteo" class="weather-icon" style="width: 100px; height: 100px;">
              <p><strong style="color: #004d00;">Temperature:</strong> ${weather.main.temp}°C</p>
              <p><strong style="color: #004d00;">Conditions:</strong> ${descriptionInEnglish}</p>
              <p><strong style="color: #004d00;">Humidity:</strong> ${weather.main.humidity}%</p>
              <p><strong style="color: #004d00;">Wind:</strong> ${weather.wind.speed} m/s</p>
            `;
            document.getElementById('weather-widget').innerHTML = widgetContent;
          } else {
            document.getElementById('weather-widget').innerHTML = '<p>Weather not available.</p>';
          }
        })
        .catch(error => {
          console.error('Error retrieving weather data:', error);
          document.getElementById('weather-widget').innerHTML = '<p>Weather not available.</p>';
        });
    }

    const weatherIcons = {
      "01d": "<%= asset_path('weather-icons/01d.png') %>",
      "02d": "<%= asset_path('weather-icons/02d.png') %>",
      "03d": "<%= asset_path('weather-icons/03d.png') %>",
      "04d": "<%= asset_path('weather-icons/04d.png') %>",
      "09d": "<%= asset_path('weather-icons/09d.png') %>",
      "10d": "<%= asset_path('weather-icons/10d.png') %>",
      "11d": "<%= asset_path('weather-icons/11d.png') %>",
    };

    /*const weatherDescriptions = {
      "clear sky": "cielo sereno",
      "few clouds": "poche nuvole",
      "scattered clouds": "nuvole sparse",
      "broken clouds": "nuvoloso",
      "shower rain": "pioggia leggera",
      "rain": "pioggia",
      "thunderstorm": "temporale",
      "haze": "foschia",
      "fog": "nebbia",
      "overcast clouds": "nuvoloso",
      "light rain": "pioggia leggera",
      "heavy rain": "pioggia intensa",
      "drizzle": "pioviggine",
      "dust": "polvere",
      "sand": "sabbia"
    };*/

    const weatherIconMapping = {
      "clear sky": "01d",
      "few clouds": "02d",
      "scattered clouds": "03d",
      "broken clouds": "04d",
      "shower rain": "09d",
      "rain": "10d",
      "thunderstorm": "11d",
      "haze": "02d",
      "fog": "02d",
      "overcast clouds": "04d",
      "light rain": "09d",
      "heavy rain": "10d",
      "drizzle": "09d",
      "dust": "02d", 
      "sand": "02d"
    };
  </script>

</body>
</html>
