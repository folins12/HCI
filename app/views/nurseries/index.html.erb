<div class="nurseries">
  <div class="spacer-large"></div>

  <p class="nursery-title">Nurseries</p>

  <p class="nursery-search-instruction">Search for nurseries by area (municipality) or by name using the search bar below.</p>

  <%= form_with url: nurseries_path, method: :get, local: true, class: 'nursery-search-form' do |form| %>
    <%= text_field_tag :query, params[:query], placeholder: 'Search...', class: 'nursery-search-bar' %>
    <%= form.submit "Search" %>
  <% end %>

  <div id="map-container">
    <div id="map"></div>
  </div>
</div>

<% if params[:query].present? && @nurseries.empty? %>
  <p class="nursery-search-failure">No nursery found with this name or in this area.</p>
  <%= link_to 'Back to the full list of nurseries', nurseries_path, class: 'back-to-all' %>
<% elsif params[:query].present? %>
  <div class="nurseries-container">
    <% @nurseries.each do |nursery| %>
      <div class="nursery-box">
        <%= link_to nursery_path(nursery) do %>
          <% if nursery.nursery_image.attached? %> 
            <%= image_tag nursery.nursery_image %>
          <% else %>
            <%= nursery.name %>
          <% end %>
          <h3><%= nursery.name %></h3>
          <p><%= nursery.location %></p>
        <% end %>
      </div>
    <% end %>
  </div>
  <%= link_to 'Back to the full list of nurseries', nurseries_path, class: 'back-to-all' %>
<% else %>
  <div class="nurseries-container <%= 'single-item' if @nurseries.size == 1 %>">
    <% @nurseries.each do |nursery| %>
      <div class="nursery-box">
        <%= link_to nursery_path(nursery) do %>
          <% if nursery.nursery_image.attached? %> 
            <%= image_tag nursery.nursery_image %>
          <% else %>
            <p>image not available</p>
          <% end %>
          <h3><%= nursery.name %></h3>
          <p><%= nursery.location %></p>
        <% end %>
      </div>
    <% end %>
  </div>
<% end %>



<script type="text/javascript">
  var nurseryNames = <%= raw @nurseries.map { |nursery| ERB::Util.json_escape(nursery.name) }.to_json %>;
  var nurseryAddres = <%= raw @nurseries.map { |nursery| ERB::Util.json_escape(nursery.address) }.to_json %>;
  var nurseryID = <%= raw @nurseries.map { |nursery| j(nursery.id) }.to_json %>;

  function initMap() {
    geocoder = new google.maps.Geocoder();
    const address = "<%= j current_user&.address.to_s %>";
    geocodeAddress(address).then(location => {

      var map = new google.maps.Map(document.getElementById('map'), {
        zoom: 10,
        center: location
      });

      var marker = new google.maps.Marker({
        position: location,
        map: map,
        icon: {
          path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW,
          scale: 10,
          fillColor: '#0000FF',
          fillOpacity: 1,
          strokeWeight: 1,
          strokeColor: '#FFFFFF'
        }
      });

      for (var i = 0; i < nurseryNames.length; i++) {
        createNurseryMarker(map,nurseryAddres[i],nurseryID[i],nurseryNames[i])
      }      
    });
  }

  function createNurseryMarker(map,address,id,name){
    geocodeAddress(address).then(nurslocation => {
      var marker = new google.maps.Marker({
        position: nurslocation,
        map: map,
        title: name
      });
      attachClickEvent(marker, name, id);
    })
  }
 
  function attachClickEvent(marker, nurseryName, nurseryID) {
    marker.addListener('click', function() {
        const url = '/nurseries/' + nurseryID;
        window.location.href = url;
    });
  }

  async function geocodeAddress(address) {
    const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`;
    
    try {
      const response = await fetch(url);
      const data = await response.json();
      if (data.length > 0) {
        const location = data[0];
        const latitude = location.lat;
        const longitude = location.lon;
        var MyLocation = { lat: parseFloat(latitude), lng: parseFloat(longitude) };
        return MyLocation;
      } 
      console.log(address+" not found");
      return null;
    } catch (error) {
      console.log(address+" not found")
      console.error('Error fetching geocode data:', error);
      return null;
    }
  }
</script>


<script async defer src="https://maps.googleapis.com/maps/api/js?key=&callback=initMap&loading=async" type="text/javascript"></script>

